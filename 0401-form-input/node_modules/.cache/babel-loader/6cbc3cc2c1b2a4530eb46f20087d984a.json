{"ast":null,"code":"import React from 'react'; // ######## FORMULÁRIOS Input\n\n/*Reatividade\r\nPara criarmos campos de formulário reativos, devemos definir o estado para o value e a função atualizadora para o onChange.*/\n/// tela: uma input reativa com string\n\n/*\r\nconst App = () => {\r\n  const [nome, setNome] = React.useState('');\r\n\r\n  return (\r\n    <form>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"nome\"\r\n        value={nome}\r\n        onChange={(event) => setNome(event.target.value)}\r\n      />\r\n      <p>{nome}</p>\r\n    </form>\r\n  );\r\n};\r\n*/\n\n/* ########## Form\r\nNo form controlamos o que acontece ao enviar o mesmo, por isso definimos uma função para lidar com o onSubmit. O preventDefault() irá prevenir o comportamento padrão, que seria de atualizar a página, enviando uma requisição para o que estiver em action=\"\".*/\n//Tela: formulário que mostra o valor no console\n//acima fizemos sem function\n\n/*\r\nconst App = () => {\r\n  const [nome, setNome] = React.useState('');\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    console.log(nome);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"nome\"\r\n        value={nome}\r\n        onChange={(event) => setNome(event.target.value)}\r\n      />\r\n      <button>Enviar</button>\r\n    </form>\r\n  );\r\n};\r\n*/\n\n/*########### Múltiplos Campos\r\nPodemos definir um estado para cada campo.*/\n//Tela: 2 input, 1x nome e 1x email\n// as strings do form após clicar no botão vão para o console.log\n\n/*\r\nconst App = () => {\r\n  const [nome, setNome] = React.useState('');\r\n  const [email, setEmail] = React.useState('');\r\n\r\n  function handleSubmit(event) {\r\n    //preventDefault() cancela o comportamento que uma tag tem\r\n    //é aplicado quando queremos colocar uma tag por motivos sde semântica\r\n    event.preventDefault();\r\n    console.log(nome, email);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"nome\"\r\n        value={nome}\r\n        onChange={(event) => setNome(event.target.value)}\r\n      />\r\n      <label htmlFor=\"email\">Email</label>\r\n      <input\r\n        type=\"email\"\r\n        id=\"email\"\r\n        value={email}\r\n        onChange={(event) => setEmail(event.target.value)}\r\n      />\r\n      <button>Enviar</button>\r\n    </form>\r\n  );\r\n};\r\n*/\n\n/*########## Objeto\r\nPodemos definir um objeto que irá conter todos os valores dos campos do formulário.*/\n\n/*\r\nconst App = () => {\r\n  const [form, setForm] = React.useState({\r\n    nome: '',\r\n    email: '',\r\n  });\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    console.log(form);\r\n  }\r\n\r\n  //o spread para adicionar o valor de value\r\n  function handleChange({ target }) {\r\n    const { id, value } = target;\r\n    setForm({ ...form, [id]: value });\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input type=\"text\" id=\"nome\" value={form.nome} onChange={handleChange} />\r\n      <label htmlFor=\"email\">Email</label>\r\n      <input\r\n        type=\"email\"\r\n        id=\"email\"\r\n        value={form.email}\r\n        onChange={handleChange}\r\n      />\r\n      <button>Enviar</button>\r\n    </form>\r\n  );\r\n};\r\n*/\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Administrador.LENOVO/Documents/Work/code/origamit/react/reactjs/0401-form-input/src/App.js"],"names":["React","App"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeC,GAAf","sourcesContent":["import React from 'react';\r\n\r\n// ######## FORMULÁRIOS Input\r\n/*Reatividade\r\nPara criarmos campos de formulário reativos, devemos definir o estado para o value e a função atualizadora para o onChange.*/\r\n\r\n/// tela: uma input reativa com string\r\n/*\r\nconst App = () => {\r\n  const [nome, setNome] = React.useState('');\r\n\r\n  return (\r\n    <form>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"nome\"\r\n        value={nome}\r\n        onChange={(event) => setNome(event.target.value)}\r\n      />\r\n      <p>{nome}</p>\r\n    </form>\r\n  );\r\n};\r\n*/\r\n\r\n/* ########## Form\r\nNo form controlamos o que acontece ao enviar o mesmo, por isso definimos uma função para lidar com o onSubmit. O preventDefault() irá prevenir o comportamento padrão, que seria de atualizar a página, enviando uma requisição para o que estiver em action=\"\".*/\r\n\r\n//Tela: formulário que mostra o valor no console\r\n//acima fizemos sem function\r\n/*\r\nconst App = () => {\r\n  const [nome, setNome] = React.useState('');\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    console.log(nome);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"nome\"\r\n        value={nome}\r\n        onChange={(event) => setNome(event.target.value)}\r\n      />\r\n      <button>Enviar</button>\r\n    </form>\r\n  );\r\n};\r\n*/\r\n\r\n/*########### Múltiplos Campos\r\nPodemos definir um estado para cada campo.*/\r\n\r\n//Tela: 2 input, 1x nome e 1x email\r\n// as strings do form após clicar no botão vão para o console.log\r\n/*\r\nconst App = () => {\r\n  const [nome, setNome] = React.useState('');\r\n  const [email, setEmail] = React.useState('');\r\n\r\n  function handleSubmit(event) {\r\n    //preventDefault() cancela o comportamento que uma tag tem\r\n    //é aplicado quando queremos colocar uma tag por motivos sde semântica\r\n    event.preventDefault();\r\n    console.log(nome, email);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"nome\"\r\n        value={nome}\r\n        onChange={(event) => setNome(event.target.value)}\r\n      />\r\n      <label htmlFor=\"email\">Email</label>\r\n      <input\r\n        type=\"email\"\r\n        id=\"email\"\r\n        value={email}\r\n        onChange={(event) => setEmail(event.target.value)}\r\n      />\r\n      <button>Enviar</button>\r\n    </form>\r\n  );\r\n};\r\n*/\r\n\r\n/*########## Objeto\r\nPodemos definir um objeto que irá conter todos os valores dos campos do formulário.*/\r\n\r\n/*\r\nconst App = () => {\r\n  const [form, setForm] = React.useState({\r\n    nome: '',\r\n    email: '',\r\n  });\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    console.log(form);\r\n  }\r\n\r\n  //o spread para adicionar o valor de value\r\n  function handleChange({ target }) {\r\n    const { id, value } = target;\r\n    setForm({ ...form, [id]: value });\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input type=\"text\" id=\"nome\" value={form.nome} onChange={handleChange} />\r\n      <label htmlFor=\"email\">Email</label>\r\n      <input\r\n        type=\"email\"\r\n        id=\"email\"\r\n        value={form.email}\r\n        onChange={handleChange}\r\n      />\r\n      <button>Enviar</button>\r\n    </form>\r\n  );\r\n};\r\n*/\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}