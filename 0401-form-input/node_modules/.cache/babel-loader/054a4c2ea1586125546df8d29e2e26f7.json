{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrador.LENOVO\\\\Documents\\\\Work\\\\code\\\\origamit\\\\react\\\\reactjs\\\\0401-form-input\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react'; // ######## FORMULÁRIOS Input\n\n/*Reatividade\r\nPara criarmos campos de formulário reativos, devemos definir o estado para o value e a função atualizadora para o onChange.*/\n/// tela: uma input reativa com string\n\n/*\r\nconst App = () => {\r\n  const [nome, setNome] = React.useState('');\r\n\r\n  return (\r\n    <form>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"nome\"\r\n        value={nome}\r\n        onChange={(event) => setNome(event.target.value)}\r\n      />\r\n      <p>{nome}</p>\r\n    </form>\r\n  );\r\n};\r\n*/\n\n/* ########## Form\r\nNo form controlamos o que acontece ao enviar o mesmo, por isso definimos uma função para lidar com o onSubmit. O preventDefault() irá prevenir o comportamento padrão, que seria de atualizar a página, enviando uma requisição para o que estiver em action=\"\".*/\n//Tela: formulário que mostra o valor no console\n//acima fizemos sem function\n\n/*\r\nconst App = () => {\r\n  const [nome, setNome] = React.useState('');\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    console.log(nome);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"nome\"\r\n        value={nome}\r\n        onChange={(event) => setNome(event.target.value)}\r\n      />\r\n      <button>Enviar</button>\r\n    </form>\r\n  );\r\n};\r\n*/\n\n/*########### Múltiplos Campos\r\nPodemos definir um estado para cada campo.*/\n//Tela: 2 input, 1x nome e 1x email\n// as strings do form após clicar no botão vão para o console.log\n\n/*\r\nconst App = () => {\r\n  const [nome, setNome] = React.useState('');\r\n  const [email, setEmail] = React.useState('');\r\n\r\n  function handleSubmit(event) {\r\n    //preventDefault() cancela o comportamento que uma tag tem\r\n    //é aplicado quando queremos colocar uma tag por motivos sde semântica\r\n    event.preventDefault();\r\n    console.log(nome, email);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"nome\"\r\n        value={nome}\r\n        onChange={(event) => setNome(event.target.value)}\r\n      />\r\n      <label htmlFor=\"email\">Email</label>\r\n      <input\r\n        type=\"email\"\r\n        id=\"email\"\r\n        value={email}\r\n        onChange={(event) => setEmail(event.target.value)}\r\n      />\r\n      <button>Enviar</button>\r\n    </form>\r\n  );\r\n};\r\n*/\n\n/*########## Objeto\r\nPodemos definir um objeto que irá conter todos os valores dos campos do formulário.*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [form, setForm] = React.useState({\n    nome: '',\n    email: ''\n  });\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    console.log(form);\n  }\n\n  function handleChange({\n    target\n  }) {\n    const {\n      id,\n      value\n    } = target;\n    setForm({ ...form,\n      [id]: value\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"nome\",\n      children: \"Nome\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"nome\",\n      value: form.nome,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"email\",\n      children: \"Email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      id: \"email\",\n      value: form.email,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Enviar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"L3BN7gFNlx7z3RyE6TSQFOTpYQ0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Administrador.LENOVO/Documents/Work/code/origamit/react/reactjs/0401-form-input/src/App.js"],"names":["React","App","form","setForm","useState","nome","email","handleSubmit","event","preventDefault","console","log","handleChange","target","id","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,KAAK,CAACI,QAAN,CAAe;AACrCC,IAAAA,IAAI,EAAE,EAD+B;AAErCC,IAAAA,KAAK,EAAE;AAF8B,GAAf,CAAxB;;AAKA,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3BA,IAAAA,KAAK,CAACC,cAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AACD;;AAED,WAASU,YAAT,CAAsB;AAAEC,IAAAA;AAAF,GAAtB,EAAkC;AAChC,UAAM;AAAEC,MAAAA,EAAF;AAAMC,MAAAA;AAAN,QAAgBF,MAAtB;AACAV,IAAAA,OAAO,CAAC,EAAE,GAAGD,IAAL;AAAW,OAACY,EAAD,GAAMC;AAAjB,KAAD,CAAP;AACD;;AAED,sBACE;AAAM,IAAA,QAAQ,EAAER,YAAhB;AAAA,4BACE;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,MAAtB;AAA6B,MAAA,KAAK,EAAEL,IAAI,CAACG,IAAzC;AAA+C,MAAA,QAAQ,EAAEO;AAAzD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAO,MAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,EAAE,EAAC,OAFL;AAGE,MAAA,KAAK,EAAEV,IAAI,CAACI,KAHd;AAIE,MAAA,QAAQ,EAAEM;AAJZ;AAAA;AAAA;AAAA;AAAA,YAJF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA9BD;;GAAMX,G;;KAAAA,G;AAgCN,eAAeA,GAAf","sourcesContent":["import React from 'react';\r\n\r\n// ######## FORMULÁRIOS Input\r\n/*Reatividade\r\nPara criarmos campos de formulário reativos, devemos definir o estado para o value e a função atualizadora para o onChange.*/\r\n\r\n/// tela: uma input reativa com string\r\n/*\r\nconst App = () => {\r\n  const [nome, setNome] = React.useState('');\r\n\r\n  return (\r\n    <form>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"nome\"\r\n        value={nome}\r\n        onChange={(event) => setNome(event.target.value)}\r\n      />\r\n      <p>{nome}</p>\r\n    </form>\r\n  );\r\n};\r\n*/\r\n\r\n/* ########## Form\r\nNo form controlamos o que acontece ao enviar o mesmo, por isso definimos uma função para lidar com o onSubmit. O preventDefault() irá prevenir o comportamento padrão, que seria de atualizar a página, enviando uma requisição para o que estiver em action=\"\".*/\r\n\r\n//Tela: formulário que mostra o valor no console\r\n//acima fizemos sem function\r\n/*\r\nconst App = () => {\r\n  const [nome, setNome] = React.useState('');\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    console.log(nome);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"nome\"\r\n        value={nome}\r\n        onChange={(event) => setNome(event.target.value)}\r\n      />\r\n      <button>Enviar</button>\r\n    </form>\r\n  );\r\n};\r\n*/\r\n\r\n/*########### Múltiplos Campos\r\nPodemos definir um estado para cada campo.*/\r\n\r\n//Tela: 2 input, 1x nome e 1x email\r\n// as strings do form após clicar no botão vão para o console.log\r\n/*\r\nconst App = () => {\r\n  const [nome, setNome] = React.useState('');\r\n  const [email, setEmail] = React.useState('');\r\n\r\n  function handleSubmit(event) {\r\n    //preventDefault() cancela o comportamento que uma tag tem\r\n    //é aplicado quando queremos colocar uma tag por motivos sde semântica\r\n    event.preventDefault();\r\n    console.log(nome, email);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"nome\"\r\n        value={nome}\r\n        onChange={(event) => setNome(event.target.value)}\r\n      />\r\n      <label htmlFor=\"email\">Email</label>\r\n      <input\r\n        type=\"email\"\r\n        id=\"email\"\r\n        value={email}\r\n        onChange={(event) => setEmail(event.target.value)}\r\n      />\r\n      <button>Enviar</button>\r\n    </form>\r\n  );\r\n};\r\n*/\r\n\r\n/*########## Objeto\r\nPodemos definir um objeto que irá conter todos os valores dos campos do formulário.*/\r\n\r\nconst App = () => {\r\n  const [form, setForm] = React.useState({\r\n    nome: '',\r\n    email: '',\r\n  });\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    console.log(form);\r\n  }\r\n\r\n  function handleChange({ target }) {\r\n    const { id, value } = target;\r\n    setForm({ ...form, [id]: value });\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input type=\"text\" id=\"nome\" value={form.nome} onChange={handleChange} />\r\n      <label htmlFor=\"email\">Email</label>\r\n      <input\r\n        type=\"email\"\r\n        id=\"email\"\r\n        value={form.email}\r\n        onChange={handleChange}\r\n      />\r\n      <button>Enviar</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}