{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrador.LENOVO\\\\Documents\\\\Work\\\\code\\\\origamit\\\\react\\\\reactjs\\\\0401-form-input\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react'; // ######## FORMULÁRIOS Input\n\n/*Reatividade\r\nPara criarmos campos de formulário reativos, devemos definir o estado para o value e a função atualizadora para o onChange.*/\n/// tela: uma input reativa com string\n\n/*\r\nconst App = () => {\r\n  const [nome, setNome] = React.useState('');\r\n\r\n  return (\r\n    <form>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"nome\"\r\n        value={nome}\r\n        onChange={(event) => setNome(event.target.value)}\r\n      />\r\n      <p>{nome}</p>\r\n    </form>\r\n  );\r\n};\r\n*/\n\n/* ########## Form\r\nNo form controlamos o que acontece ao enviar o mesmo, por isso definimos uma função para lidar com o onSubmit. O preventDefault() irá prevenir o comportamento padrão, que seria de atualizar a página, enviando uma requisição para o que estiver em action=\"\".*/\n//Tela: formulário que mostra o valor no console\n//acima fizemos sem function\n\n/*\r\nconst App = () => {\r\n  const [nome, setNome] = React.useState('');\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    console.log(nome);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"nome\"\r\n        value={nome}\r\n        onChange={(event) => setNome(event.target.value)}\r\n      />\r\n      <button>Enviar</button>\r\n    </form>\r\n  );\r\n};\r\n*/\n\n/*########### Múltiplos Campos\r\nPodemos definir um estado para cada campo.*/\n//Tela: 2 input, 1x nome e 1x email\n// as strings do form após clicar no botão vão para o console.log\n\n/*\r\nconst App = () => {\r\n  const [nome, setNome] = React.useState('');\r\n  const [email, setEmail] = React.useState('');\r\n\r\n  function handleSubmit(event) {\r\n    //preventDefault() cancela o comportamento que uma tag tem\r\n    //é aplicado quando queremos colocar uma tag por motivos sde semântica\r\n    event.preventDefault();\r\n    console.log(nome, email);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"nome\"\r\n        value={nome}\r\n        onChange={(event) => setNome(event.target.value)}\r\n      />\r\n      <label htmlFor=\"email\">Email</label>\r\n      <input\r\n        type=\"email\"\r\n        id=\"email\"\r\n        value={email}\r\n        onChange={(event) => setEmail(event.target.value)}\r\n      />\r\n      <button>Enviar</button>\r\n    </form>\r\n  );\r\n};\r\n*/\n\n/*########## Objeto\r\nPodemos definir um objeto que irá conter todos os valores dos campos do formulário.*/\n\n/*\r\nconst App = () => {\r\n  const [form, setForm] = React.useState({\r\n    nome: '',\r\n    email: '',\r\n  });\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    console.log(form);\r\n  }\r\n\r\n  //o spread para adicionar o valor de value\r\n  function handleChange({ target }) {\r\n    const { id, value } = target;\r\n    setForm({ ...form, [id]: value });\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input type=\"text\" id=\"nome\" value={form.nome} onChange={handleChange} />\r\n      <label htmlFor=\"email\">Email</label>\r\n      <input\r\n        type=\"email\"\r\n        id=\"email\"\r\n        value={form.email}\r\n        onChange={handleChange}\r\n      />\r\n      <button>Enviar</button>\r\n    </form>\r\n  );\r\n};\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [form, setForm] = React.useState({\n    nome: '',\n    email: '',\n    senha: '',\n    cep: '',\n    rua: '',\n    numero: '',\n    bairro: '',\n    cidade: '',\n    estado: ''\n  });\n  const [response, setResponse] = React.useState(null);\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    fetch('https://ranekapi.origamid.dev/json/api/usuario', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(form)\n    }).then(response => {\n      setResponse(response);\n    });\n  }\n\n  function handleChange({\n    target\n  }) {\n    const {\n      id,\n      value\n    } = target;\n    setForm({ ...form,\n      [id]: value\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"nome\",\n      children: \"Nome\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"nome\",\n      value: form.nome,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"email\",\n      children: \"Email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      id: \"email\",\n      value: form.email,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"senha\",\n      children: \"Senha\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      id: \"senha\",\n      value: form.senha,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"cep\",\n      children: \"Cep\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"cep\",\n      value: form.cep,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"senha\",\n      children: \"Rua\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"rua\",\n      value: form.rua,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"numero\",\n      children: \"N\\xFAmero\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"numero\",\n      value: form.numero,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"bairro\",\n      children: \"Bairro\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"bairro\",\n      value: form.bairro,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"cidade\",\n      children: \"Cidade\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"cidade\",\n      value: form.cidade,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"estado\",\n      children: \"Estado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"estado\",\n      value: form.estado,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Enviar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), response && response.ok && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Usu\\xE1rio Criado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 35\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"vCmnTCTlCJfP3E83r4F+v7cKUAE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Administrador.LENOVO/Documents/Work/code/origamit/react/reactjs/0401-form-input/src/App.js"],"names":["React","App","form","setForm","useState","nome","email","senha","cep","rua","numero","bairro","cidade","estado","response","setResponse","handleSubmit","event","preventDefault","fetch","method","headers","body","JSON","stringify","then","handleChange","target","id","value","ok"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,KAAK,CAACI,QAAN,CAAe;AACrCC,IAAAA,IAAI,EAAE,EAD+B;AAErCC,IAAAA,KAAK,EAAE,EAF8B;AAGrCC,IAAAA,KAAK,EAAE,EAH8B;AAIrCC,IAAAA,GAAG,EAAE,EAJgC;AAKrCC,IAAAA,GAAG,EAAE,EALgC;AAMrCC,IAAAA,MAAM,EAAE,EAN6B;AAOrCC,IAAAA,MAAM,EAAE,EAP6B;AAQrCC,IAAAA,MAAM,EAAE,EAR6B;AASrCC,IAAAA,MAAM,EAAE;AAT6B,GAAf,CAAxB;AAYA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bf,KAAK,CAACI,QAAN,CAAe,IAAf,CAAhC;;AAEA,WAASY,YAAT,CAAsBC,KAAtB,EAA6B;AAC3BA,IAAAA,KAAK,CAACC,cAAN;AACAC,IAAAA,KAAK,CAAC,gDAAD,EAAmD;AACtDC,MAAAA,MAAM,EAAE,MAD8C;AAEtDC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF6C;AAKtDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAetB,IAAf;AALgD,KAAnD,CAAL,CAMGuB,IANH,CAMSX,QAAD,IAAc;AACpBC,MAAAA,WAAW,CAACD,QAAD,CAAX;AACD,KARD;AASD;;AAED,WAASY,YAAT,CAAsB;AAAEC,IAAAA;AAAF,GAAtB,EAAkC;AAChC,UAAM;AAAEC,MAAAA,EAAF;AAAMC,MAAAA;AAAN,QAAgBF,MAAtB;AACAxB,IAAAA,OAAO,CAAC,EAAE,GAAGD,IAAL;AAAW,OAAC0B,EAAD,GAAMC;AAAjB,KAAD,CAAP;AACD;;AAED,sBACE;AAAM,IAAA,QAAQ,EAAEb,YAAhB;AAAA,4BACE;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,MAAtB;AAA6B,MAAA,KAAK,EAAEd,IAAI,CAACG,IAAzC;AAA+C,MAAA,QAAQ,EAAEqB;AAAzD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAO,MAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,EAAE,EAAC,OAFL;AAGE,MAAA,KAAK,EAAExB,IAAI,CAACI,KAHd;AAIE,MAAA,QAAQ,EAAEoB;AAJZ;AAAA;AAAA;AAAA;AAAA,YAJF,eAUE;AAAO,MAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,EAAE,EAAC,OAFL;AAGE,MAAA,KAAK,EAAExB,IAAI,CAACK,KAHd;AAIE,MAAA,QAAQ,EAAEmB;AAJZ;AAAA;AAAA;AAAA;AAAA,YAXF,eAiBE;AAAO,MAAA,OAAO,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBF,eAkBE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,KAAtB;AAA4B,MAAA,KAAK,EAAExB,IAAI,CAACM,GAAxC;AAA6C,MAAA,QAAQ,EAAEkB;AAAvD;AAAA;AAAA;AAAA;AAAA,YAlBF,eAmBE;AAAO,MAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBF,eAoBE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,KAAtB;AAA4B,MAAA,KAAK,EAAExB,IAAI,CAACO,GAAxC;AAA6C,MAAA,QAAQ,EAAEiB;AAAvD;AAAA;AAAA;AAAA;AAAA,YApBF,eAqBE;AAAO,MAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YArBF,eAsBE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,EAAE,EAAC,QAFL;AAGE,MAAA,KAAK,EAAExB,IAAI,CAACQ,MAHd;AAIE,MAAA,QAAQ,EAAEgB;AAJZ;AAAA;AAAA;AAAA;AAAA,YAtBF,eA4BE;AAAO,MAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA5BF,eA6BE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,EAAE,EAAC,QAFL;AAGE,MAAA,KAAK,EAAExB,IAAI,CAACS,MAHd;AAIE,MAAA,QAAQ,EAAEe;AAJZ;AAAA;AAAA;AAAA;AAAA,YA7BF,eAmCE;AAAO,MAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnCF,eAoCE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,EAAE,EAAC,QAFL;AAGE,MAAA,KAAK,EAAExB,IAAI,CAACU,MAHd;AAIE,MAAA,QAAQ,EAAEc;AAJZ;AAAA;AAAA;AAAA;AAAA,YApCF,eA0CE;AAAO,MAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA1CF,eA2CE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,EAAE,EAAC,QAFL;AAGE,MAAA,KAAK,EAAExB,IAAI,CAACW,MAHd;AAIE,MAAA,QAAQ,EAAEa;AAJZ;AAAA;AAAA;AAAA;AAAA,YA3CF,eAiDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjDF,EAkDGZ,QAAQ,IAAIA,QAAQ,CAACgB,EAArB,iBAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAlD9B;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsDD,CAvFD;;GAAM7B,G;;KAAAA,G;AAyFN,eAAeA,GAAf","sourcesContent":["import React from 'react';\r\n\r\n// ######## FORMULÁRIOS Input\r\n/*Reatividade\r\nPara criarmos campos de formulário reativos, devemos definir o estado para o value e a função atualizadora para o onChange.*/\r\n\r\n/// tela: uma input reativa com string\r\n/*\r\nconst App = () => {\r\n  const [nome, setNome] = React.useState('');\r\n\r\n  return (\r\n    <form>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"nome\"\r\n        value={nome}\r\n        onChange={(event) => setNome(event.target.value)}\r\n      />\r\n      <p>{nome}</p>\r\n    </form>\r\n  );\r\n};\r\n*/\r\n\r\n/* ########## Form\r\nNo form controlamos o que acontece ao enviar o mesmo, por isso definimos uma função para lidar com o onSubmit. O preventDefault() irá prevenir o comportamento padrão, que seria de atualizar a página, enviando uma requisição para o que estiver em action=\"\".*/\r\n\r\n//Tela: formulário que mostra o valor no console\r\n//acima fizemos sem function\r\n/*\r\nconst App = () => {\r\n  const [nome, setNome] = React.useState('');\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    console.log(nome);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"nome\"\r\n        value={nome}\r\n        onChange={(event) => setNome(event.target.value)}\r\n      />\r\n      <button>Enviar</button>\r\n    </form>\r\n  );\r\n};\r\n*/\r\n\r\n/*########### Múltiplos Campos\r\nPodemos definir um estado para cada campo.*/\r\n\r\n//Tela: 2 input, 1x nome e 1x email\r\n// as strings do form após clicar no botão vão para o console.log\r\n/*\r\nconst App = () => {\r\n  const [nome, setNome] = React.useState('');\r\n  const [email, setEmail] = React.useState('');\r\n\r\n  function handleSubmit(event) {\r\n    //preventDefault() cancela o comportamento que uma tag tem\r\n    //é aplicado quando queremos colocar uma tag por motivos sde semântica\r\n    event.preventDefault();\r\n    console.log(nome, email);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"nome\"\r\n        value={nome}\r\n        onChange={(event) => setNome(event.target.value)}\r\n      />\r\n      <label htmlFor=\"email\">Email</label>\r\n      <input\r\n        type=\"email\"\r\n        id=\"email\"\r\n        value={email}\r\n        onChange={(event) => setEmail(event.target.value)}\r\n      />\r\n      <button>Enviar</button>\r\n    </form>\r\n  );\r\n};\r\n*/\r\n\r\n/*########## Objeto\r\nPodemos definir um objeto que irá conter todos os valores dos campos do formulário.*/\r\n\r\n/*\r\nconst App = () => {\r\n  const [form, setForm] = React.useState({\r\n    nome: '',\r\n    email: '',\r\n  });\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    console.log(form);\r\n  }\r\n\r\n  //o spread para adicionar o valor de value\r\n  function handleChange({ target }) {\r\n    const { id, value } = target;\r\n    setForm({ ...form, [id]: value });\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input type=\"text\" id=\"nome\" value={form.nome} onChange={handleChange} />\r\n      <label htmlFor=\"email\">Email</label>\r\n      <input\r\n        type=\"email\"\r\n        id=\"email\"\r\n        value={form.email}\r\n        onChange={handleChange}\r\n      />\r\n      <button>Enviar</button>\r\n    </form>\r\n  );\r\n};\r\n*/\r\n\r\nconst App = () => {\r\n  const [form, setForm] = React.useState({\r\n    nome: '',\r\n    email: '',\r\n    senha: '',\r\n    cep: '',\r\n    rua: '',\r\n    numero: '',\r\n    bairro: '',\r\n    cidade: '',\r\n    estado: '',\r\n  });\r\n\r\n  const [response, setResponse] = React.useState(null);\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    fetch('https://ranekapi.origamid.dev/json/api/usuario', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(form),\r\n    }).then((response) => {\r\n      setResponse(response);\r\n    });\r\n  }\r\n\r\n  function handleChange({ target }) {\r\n    const { id, value } = target;\r\n    setForm({ ...form, [id]: value });\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"nome\">Nome</label>\r\n      <input type=\"text\" id=\"nome\" value={form.nome} onChange={handleChange} />\r\n      <label htmlFor=\"email\">Email</label>\r\n      <input\r\n        type=\"email\"\r\n        id=\"email\"\r\n        value={form.email}\r\n        onChange={handleChange}\r\n      />\r\n      <label htmlFor=\"senha\">Senha</label>\r\n      <input\r\n        type=\"password\"\r\n        id=\"senha\"\r\n        value={form.senha}\r\n        onChange={handleChange}\r\n      />\r\n      <label htmlFor=\"cep\">Cep</label>\r\n      <input type=\"text\" id=\"cep\" value={form.cep} onChange={handleChange} />\r\n      <label htmlFor=\"senha\">Rua</label>\r\n      <input type=\"text\" id=\"rua\" value={form.rua} onChange={handleChange} />\r\n      <label htmlFor=\"numero\">Número</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"numero\"\r\n        value={form.numero}\r\n        onChange={handleChange}\r\n      />\r\n      <label htmlFor=\"bairro\">Bairro</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"bairro\"\r\n        value={form.bairro}\r\n        onChange={handleChange}\r\n      />\r\n      <label htmlFor=\"cidade\">Cidade</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"cidade\"\r\n        value={form.cidade}\r\n        onChange={handleChange}\r\n      />\r\n      <label htmlFor=\"estado\">Estado</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"estado\"\r\n        value={form.estado}\r\n        onChange={handleChange}\r\n      />\r\n      <button>Enviar</button>\r\n      {response && response.ok && <p>Usuário Criado</p>}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}