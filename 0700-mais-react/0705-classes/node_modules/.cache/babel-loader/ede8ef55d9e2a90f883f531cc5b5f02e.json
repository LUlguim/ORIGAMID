{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrador.LENOVO\\\\Desktop\\\\clone\\\\origamid\\\\0700-mais-react\\\\0705-classes\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Produtos from './Produtos';\n/*extends React.Component\r\nAntes dos hooks a única forma de criarmos componentes com estados reativos, era através da extensão da classe React.Component. O JSX que é renderizado pelo componente de classe deve estar dentro do retorno do método render().\r\n------------------------------------------------------\r\n\r\nthis.props\r\nAs propriedades ficam dentro do objeto da classe, e podem ser acessadas através do this.props;\r\n------------------------------------------------------\r\n\r\nthis.setState()\r\nO this.setState é um método especial utilizado para atualizarmos o this.state. Ele irá renderizar o componente, toda vez que for ativado.\r\n------------------------------------------------------\r\n\r\nMétodos\r\nOs métodos podem ser definidos no corpo da classe. Mas para passarmos os mesmos como um callback é necessário utilizarmos o bind, para que o método mantenha o contexto da classe em this.\r\n------------------------------------------------------\r\n\r\nCiclo de Vida\r\nAssim como podemos usar o useEffect para efeitos que acontecem de acordo com mudanças no componente. Temos também alguns métodos na classe para lidar com esse ciclo de vida do componente. Aqui mostro apenas 3, mas existem diversos outros métodos.\r\n\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [ativar, setAtivar] = React.useState(true);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [ativar && /*#__PURE__*/_jsxDEV(Produtos, {\n      titulo: \"Esses s\\xE3o os Produtos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setAtivar(!ativar),\n      children: \"Toggle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"A0o4pILb1I4k6k0QYxV1KAqsFo4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Administrador.LENOVO/Desktop/clone/origamid/0700-mais-react/0705-classes/src/App.js"],"names":["React","Produtos","App","ativar","setAtivar","useState"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,KAAK,CAACK,QAAN,CAAe,IAAf,CAA5B;AAEA,sBACE;AAAA,eACGF,MAAM,iBAAI,QAAC,QAAD;AAAU,MAAA,MAAM,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA,YADb,eAEE;AAAQ,MAAA,OAAO,EAAE,MAAMC,SAAS,CAAC,CAACD,MAAF,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CATD;;GAAMD,G;;KAAAA,G;AAWN,eAAeA,GAAf","sourcesContent":["import React from 'react';\r\nimport Produtos from './Produtos';\r\n\r\n/*extends React.Component\r\nAntes dos hooks a única forma de criarmos componentes com estados reativos, era através da extensão da classe React.Component. O JSX que é renderizado pelo componente de classe deve estar dentro do retorno do método render().\r\n------------------------------------------------------\r\n\r\nthis.props\r\nAs propriedades ficam dentro do objeto da classe, e podem ser acessadas através do this.props;\r\n------------------------------------------------------\r\n\r\nthis.setState()\r\nO this.setState é um método especial utilizado para atualizarmos o this.state. Ele irá renderizar o componente, toda vez que for ativado.\r\n------------------------------------------------------\r\n\r\nMétodos\r\nOs métodos podem ser definidos no corpo da classe. Mas para passarmos os mesmos como um callback é necessário utilizarmos o bind, para que o método mantenha o contexto da classe em this.\r\n------------------------------------------------------\r\n\r\nCiclo de Vida\r\nAssim como podemos usar o useEffect para efeitos que acontecem de acordo com mudanças no componente. Temos também alguns métodos na classe para lidar com esse ciclo de vida do componente. Aqui mostro apenas 3, mas existem diversos outros métodos.\r\n\r\n*/\r\n\r\nconst App = () => {\r\n  const [ativar, setAtivar] = React.useState(true);\r\n\r\n  return (\r\n    <div>\r\n      {ativar && <Produtos titulo=\"Esses são os Produtos\" />}\r\n      <button onClick={() => setAtivar(!ativar)}>Toggle</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}